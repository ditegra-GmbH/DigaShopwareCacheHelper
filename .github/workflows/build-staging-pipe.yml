# This workflow is meant to be used to build a compatible (validated) plugin run stan, run tests and deploy to staging environment. also install and activate the extension
# Version 0.0.2

name: Build validate & deploy
on:
  workflow_dispatch:
    inputs:
      shopwareVersion:
        description: 'The shopware version to build the extension with'
        required: false
        type: string
        default: '6.7.0'
      cliVersion:
        description: 'The shopware-cli version to build the extension with'
        required: false
        type: string
        default: 'latest'
      stagingHost:
        description: 'staging host for scp connection'
        required: true
        type: string
        default: 'k43j85.meinserver.io'
      stagingExtensionPath:
        description: 'shopware root path on staging host'
        required: true
        type: string
        default: '/var/www/clients/client1/web33/web/prod/'

env:  
  SHOPWARE_CLI_VERSION: ${{ inputs.cliVersion || 'latest' }}
  STAGING_HOST: ${{ inputs.stagingHost || 'k43j85.meinserver.io' }}
  STAGING_EXTENSION_PATH: ${{ inputs.stagingExtensionPath || '/var/www/clients/client1/web33/web/prod/' }}
  EXTENSION_NAME: ${{ github.event.repository.name }}
  
jobs:  
  deploy:
    container: ghcr.io/friendsofshopware/platform-plugin-dev:v${{ inputs.shopwareVersion || '6.7.0' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Specify safe directory for git
        run: |
            git config --global --add safe.directory $(pwd)
      
      - name: Install shopware-cli
        uses: FriendsOfShopware/shopware-cli-action@v1
        with:
          version: ${{ env.SHOPWARE_CLI_VERSION }}
      
      - name: Run static code analysis with stan and cs fixer for twig
        run: |
          composer update
          make dev
          make validate
          make clean

      - name: Build extension
        run: |
          if test -f "./src/Resources/app/administration/package.json"; then
              npm install --prefix "./src/Resources/app/administration/" --unsafe-perm
          fi
          
          if test -f "./src/Resources/app/storefront/package.json"; then
              npm install --prefix "./src/Resources/app/storefront/" --unsafe-perm
          fi
          
          if test -f "./src/Resources/app/package.json"; then
              npm install --prefix "./src/Resources/app/" --unsafe-perm
          fi
          
          rm -rf ./.github
          shopware-cli --version
          shopware-cli extension build .

      - name: Create zip and install devs
        run: |
          make zip
          ls -a ./artifacts
          echo "ZIP_FILENAME=$(ls -1t ./artifacts  | head -n 1)" >> $GITHUB_ENV
          composer --version

      - name: Validate plugin zip for shopware store compatibility
        run: |
          shopware-cli extension validate ./artifacts/$ZIP_FILENAME
          
      - name: Upload artifacts to git
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ./artifacts/
          
      - name: Copy zip to staging
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.STAGING_HOST }} 
          username: ${{ secrets.STAGING_SW65_USER }}
          password: ${{ secrets.STAGING_SW65_SECRET }}
          source: "artifacts/${{ env.ZIP_FILENAME }}"
          target: ${{ env.STAGING_EXTENSION_PATH }}
     
      - name: Install plugin on staging
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.STAGING_HOST }} 
          username: ${{ secrets.STAGING_SW65_USER }}
          password: ${{ secrets.STAGING_SW65_SECRET }}
          envs: ZIP_FILENAME, EXTENSION_NAME, STAGING_EXTENSION_PATH
          script: |
            cd $STAGING_EXTENSION_PATH
            pwd
            bin/console plugin:zip-import artifacts/$ZIP_FILENAME
            bin/console plugin:update $EXTENSION_NAME       
            bin/console plugin:install -a $EXTENSION_NAME
            bin/console theme:compile
            bin/console cache:clear
            rm -rf artifacts/$ZIP_FILENAME